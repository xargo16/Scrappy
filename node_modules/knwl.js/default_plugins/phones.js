/* Phone Number Parser */
function Phones(knwl) {

    this.languages = {
        'english': true,
    };

    this.areaCodeLength = 3; // Hard code this assumption for now

    // IMPORTANT: This function makes the assumption that there is always 3 digits in an area code
    this.formatPhoneNumber = function(number) {
        var formattedNumber = number.slice(number.length - 7, number.length - 4) + "-" +
        number.slice(number.length - 4, number.length);

        formattedNumber = "(" + number.slice(number.length - (phones.areaCodeLength + 7), number.length - 7) + ") " +
        formattedNumber;

        if (number.length > (phones.areaCodeLength + 7)) {
            formattedNumber = "+" + number.slice(0, number.length - (phones.areaCodeLength + 7)) +
            " " + formattedNumber;
        }
        return formattedNumber;
    };

    this.calls = function() {
        var results = [];

        var words = knwl.words.get('words');
        var currWord = null;

        /* Phone Numbers can be as little as 7 digits per word,
           and as large as 13 if the word contains country code & area code & phone number
           note: this applies to North American area codes assuming 3 digits
           and is not applicable globally */
           var phoneRegexp = /^\d{7,13}$/;
        // North American Area Code's always have 3 digits
        // To make this universal, could use a dictionary keyed on Country
        var areaCodeRegExp = /^\d{3}$/;
        // Country Code's vary from 1 to 3 digits
        var countryCodeRegExp = /^\d{1,3}$/;

        for (var i = 0; i < words.length; i++) {
            currWord = knwl.tasks.removeCharacters(["-", "(", ")"], words[i]);

            if (phoneRegexp.test(currWord)) {
                /* At this point the word is thought to be a phone number.
                   If the current word is only of length 7 it's required that the previous word
                   is the area code, assuming there is a previous word. */
                   if (i > 0 && currWord.length === 7) {
                    var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                    if (areaCodeRegExp.test(areaCode)) {
                        currWord = areaCode + currWord;

                        /* At this point the current word and previous word make up the area code
                           and phone number.
                           Check whether the 2 words back represents the country code */
                           if (i > 1) {
                            var countryCode = knwl.tasks.removeCharacters("+", words[i - 2]);
                            if (countryCodeRegExp.test(countryCode)) {
                                currWord = countryCode + currWord;
                            }
                        }
                    }
                    /* If the current word is not length 7, it's possible that the current word contains
                   both the phone number and area code and the previous word is the country code.
                   Once again, this is assuming that the areaCode length is 3 */
               } else if (i > 0 && currWord.length === (phones.areaCodeLength + 7)) {
                var countryCode = knwl.tasks.removeCharacters("+", words[i - 1]);
                if (countryCodeRegExp.test(countryCode)) {
                    currWord = countryCode + currWord;
                }
            }

                /* We needed the phoneRegex to accept a minimum of 7 digits in case the preceding words
                   made up the area code and possibly the country code, but if at this point there is
                   not at least 7 digits plus the areaCodeLength in the currWord then it is not likely
                   a phone number */
                   if (currWord.length >= (7 + phones.areaCodeLength)) {
                    var phoneObj = {
                        phone: phones.formatPhoneNumber(currWord),
                        preview: knwl.tasks.preview(i),
                        found: i
                    };
                    results.push(phoneObj);
                }
            }
        }
        return results;
    };

    /* I assumed that format of UK's phone number can be structured with 3 parts
      A - area code
      B - local customer number
      C - local customer number
      Example:
      (0161) 111 2222
         A    B   C
      Usually local customer number part is divided with space, but I will
      take care of case when it's not anyway
    */
    this.callsUK = function() {
        var results = [];
        var nonInternationalFormatUKNumbers = [];
        var internationalFormatUKNumbers = [];

        nonInternationalFormatUKNumbers = getUKNumbersInNotInternationalFormat()
        internationalFormatUKNumbers = getUKNumbersInInternationalFormat();

        for(var i = 0; i < nonInternationalFormatUKNumbers.length; i++){
          results.push(nonInternationalFormatUKNumbers[i]);
        }
        for(var i = 0; i < internationalFormatUKNumbers.length; i++){
          results.push(internationalFormatUKNumbers[i]);
        }

        return removeDuplicatesFromArray(results);
    };

    //Checking for phone numbers without +44 at the beginning
    function getUKNumbersInNotInternationalFormat(){
      var results = [];
      var words = knwl.words.get('words');
      var currWord = null;

      // Phone Numbers in UK can be as little as 3 digits per word,
      // and as large as 11.
      var phoneRegexp = /^\d{3,11}$/;

      for (var i = 0; i < words.length; i++) {
          currWord = knwl.tasks.removeCharacters(["-", "(", ")"], words[i]);
          console.log(currWord);
          if (phoneRegexp.test(currWord)) {
              /* At this point the word is thought to be a part of phone number.
                 There are 4 possibilities now:
                1: Word is 10 or 11 digits long without spaces so it presents
                UK's phone number
                2: Word is 4 digits long so there are 2 previous words.
                If first previous word is 4 digits then second must be 3 digits. (020) 1111 2222
                If first previous word is 3 digits then second must be 4 digits. (0113) 111 2222
                3: Word is 5 digits long so previous word should be area code
                and take 5 digits long (01204) 11111
                4: Word is 6 digits long so previous word should be area code
                and take 5 digits long (01223) 111111
                */

                if(currWord.length === 10 || currWord.length === 11){
                  results.push(currWord);
                }

                if(i > 1 && currWord.length === 4){
                  var previousWord = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                  var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 2]);

                  if(previousWord.length === 4){
                    if(areaCode.length === 3){
                      results.push("(" + areaCode + ") " + previousWord + " " + currWord);
                    }
                  }
                  else if(previousWord.length === 3){
                    if(areaCode.length === 4){
                      results.push("(" + areaCode + ") " + previousWord + " " + currWord);
                    }
                  }
                }

                if(i > 0 && currWord.length === 5){
                  var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                  if(areaCode.length === 5){
                      results.push("(" + areaCode + ") " + currWord);
                  }
                }

                 if (i > 0 && currWord.length === 6) {
                  var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                  if (areaCode.length === 5) {
                      results.push("(" + areaCode + ") " + currWord);
                    }
                  }

              }
            }
            return results;
    }

    //Checking for phone numbers with +44 at the beginning
    function getUKNumbersInInternationalFormat(){
      var results = [];
      var words = knwl.words.get('words');
      var currWord = null;

      // Phone Numbers in UK in international format can be as little as 3 digits
      //per word and as large as 12.
      var phoneRegexp = /^\d{3,11}$/;

      for (var i = 0; i < words.length; i++) {
                        console.log(currWord);
          currWord = knwl.tasks.removeCharacters(["-", "(", ")", "+"], words[i]);
          if (phoneRegexp.test(currWord)) {
              /* At this point the word is thought to be a part of phone number.
                 There are 4 possibilities now:
                1: Word is 11 or 12 digits long without spaces so it presents
                UK's phone number in international format number
                2: Word is 4 digits long so there are 3 previous words.
                If first previous word is 4 digits then second must be 2 digits
                and third must be 2 digits. +44 (20) 1111 2222
                If first previous word is 3 digits then second must be 3 digits
                and third must be 2 digits. +44 (113) 111 2222
                3: Word is 5 digits long so there are 2 previous words.
                 First must be 4 digits and second 2 digits +44 (1204) 11111
                4: Word is 6 digits long so there are 2 previous words.
                First must be 4 digits and second 2 digits +44 (1223) 111111
                */

                if(currWord.length === 11 || currWord.length === 12){
                  results.push("+" + currWord);
                }

                if(i > 2 && currWord.length === 4){
                  var previousWord = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                  var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 2]);
                  var countryCode = knwl.tasks.removeCharacters("+", words[i - 3]);

                  //+44 (20) 1111 2222
                  if(previousWord.length === 4){
                    if(areaCode.length === 2){
                      if(countryCode == 44){
                        results.push("+44" + " (" + areaCode + ") " + previousWord + " " + currWord);
                      }
                    }
                  }
                  //+44 (113) 111 2222
                  else if(previousWord.length === 3){
                    if(areaCode.length === 3){
                      if(countryCode == 44){
                        results.push("+44" + " (" + areaCode + ") " + previousWord + " " + currWord);
                      }
                    }
                  }
                }

                //+44 (1204) 11111
                if(i > 0 && currWord.length === 5){
                  var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                  var countryCode = knwl.tasks.removeCharacters("+", words[i - 2]);

                  if(areaCode.length === 4){
                    if(countryCode == 44){
                      results.push("+44" + " (" + areaCode + ") " + previousWord + " " + currWord);
                    }
                  }
                }
                //+44 (1223) 111111
                 if (i > 0 && currWord.length === 6) {
                  var areaCode = knwl.tasks.removeCharacters(["(", ")"], words[i - 1]);
                  var countryCode = knwl.tasks.removeCharacters("+", words[i - 2]);

                  if (areaCode.length === 5) {
                    if(countryCode == 44){
                      results.push("+44" + " (" + areaCode + ") " + previousWord + " " + currWord);
                    }
                  }
                }
              }
            }
            return results;
    }

    function removeDuplicatesFromArray(a){
        return Array.from(new Set(a));
    }


    var phones = this;
};

module.exports = Phones;
